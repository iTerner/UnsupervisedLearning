from algorithms.kmeans import Kmeans
from tests.noctest import NumberOfClustersTest
from loaddata import LoadData
from plot import ClusterPlots
from tests.scores import ScoreInformation
from algorithms.hierarchical import Heirarchical
from algorithms.gmm import GMM
from tests.stest import StatisticalTest
import csv
from function import get_list
import numpy as np

from scipy.stats import kruskal, f_oneway


"""
The function finds out what is the best number of clusters for the given dataset
"""


def best_number_of_clusters_test(data, datanum):
    a = Kmeans(2, data, datanum, True)
    test = NumberOfClustersTest(a)
    test.test()


"""
create plot of the data after clustering
"""


def plot_data(data, datanum, centers, anomaly_index, points):
    p = ClusterPlots(centers, data, datanum)
    p.plot(anomaly_index, points)


"""
The function calculate the score for each algorithm and each dataset
"""


def get_scores(data, datanum, n):
    test = ScoreInformation(data, datanum)
    test.get_all_scores(10, n)


"""
The function preform statistical tests
"""


def statistical_tests(datanum, smallindex, bigindex, add=""):
    big = get_list(bigindex, datanum, add)
    small = get_list(smallindex, datanum, add)
    vectors = [small, big]
    test = StatisticalTest(vectors)
    p = test.evaluate()
    print("p value:", p)


"""
The function compute the external quality of clustering
"""


def external_quality_of_clustering(data, datanum, colnum, centers):
    s = ScoreInformation(data, datanum)
    s.mutal_information(colnum, centers)


def anomaly_detection(data, datanum, n):
    a = Kmeans(n, data, datanum, False)
    anom_point_index = a.Cluster_based_outlier_detection()
    data = a.data
    # get_scores(data, datanum, n)


def density_estimate(data, datanum, n):
    a = Kmeans(n, data, datanum, False)
    a.density_based_outlier_detection()
    data = a.data
    # print("data without anomaly", a.data)
    get_scores(data, datanum, n)


def score_compare_plot(data, datanum, n):
    p = ClusterPlots(n, data, datanum)
    p.score_plot()


def optimal_clustering_test(data, datanum, n):
    a = Kmeans(2, data, datanum, True)
    test = NumberOfClustersTest(a)
    test.optimal_number_of_clustering_test(n)


def main():
    data = LoadData().get_data1()
    datanum = 1

    # density_estimate(data, datanum, 4)
    # optimal_clustering_test(data, datanum, 30)
    # score_compare_plot(data, datanum, 4)
    # anomaly_detection(data, datanum, 4)
    # external_quality_of_clustering(data, datanum, "Class", 3)
    # statistical_tests(datanum, 3, 0)
    # get_scores(data, datanum, 4)
    # plot_data(data, datanum, 3)
    # best_number_of_clusters_test(data, datanum)
    ds2 = {2: [0.40159970370543596, 0.40080228232450493, 0.4013656346754611, 0.4017457562793992, 0.4009529422866524, 0.4017803312185138, 0.40174575627939907, 0.4004659418883704, 0.40126136039442506, 0.40174575627939924, 0.40094626365758, 0.4017498485252751, 0.4003563368063971, 0.4018212696883959, 0.4005249321128271, 0.40105949626478304, 0.4007862005925624, 0.40041402271291887, 0.4017457562793992, 0.4017644374398072, 0.40104888452795184, 0.40178286580311146, 0.4007956705212764, 0.401764437439807, 0.4017457562793985, 0.4017457562793991, 0.40035304448599424, 0.4017604830260834, 0.40091407613835495, 0.400660262741893], 3: [0.4389295754255003, 0.43858765534596883, 0.4391165614372637, 0.4388414441476014, 0.43894174485396037, 0.4395020179123153, 0.4392971927849169, 0.4385884148644636, 0.4392971927849168, 0.44000002534353655, 0.44012404231920377, 0.4392971927849169, 0.43854806341392477, 0.4385937240018072, 0.43894854534743366, 0.44013144330813087, 0.44000402887729584, 0.4399994839998127, 0.4385998457151803, 0.4399881953979931, 0.4400019290539303, 0.4399835807037751, 0.44000402887729595, 0.4386198170783277, 0.4388406706335411, 0.43998454147212074, 0.4388289358513701, 0.43998358070377497, 0.43995439281099546, 0.43890391956315344], 4: [0.44564654094147077, 0.44576577661039685, 0.4457976419325973, 0.4456778461380177, 0.4457701201857854, 0.44573423640707055, 0.44576577661039685, 0.4457657766103969, 0.44569409407420607, 0.4451368922395648, 0.4457701201857852, 0.4456517523346389, 0.4454268895685882, 0.44540635190982975, 0.44576577661039685, 0.44576577661039685, 0.4455550740611766, 0.44576577661039685, 0.44576652511921094, 0.4457701201857852, 0.4457657766103969, 0.44576577661039696, 0.44583131329481973, 0.44576577661039685, 0.44576577661039685, 0.4457657766103969, 0.44573261056888847, 0.4457701201857852, 0.44576577661039696, 0.44577012018578527], 5: [0.4389381497730314, 0.43928984014859646, 0.4392865264775973, 0.43945556384048357, 0.4392795106890682, 0.43906577317958606, 0.43953731418240055, 0.43925761049617845, 0.43929379139519215, 0.43922638670661673, 0.4392943577536523, 0.43923183352675066, 0.43880036105143905, 0.43930788569196205, 0.4382602660962524, 0.4392708064224789, 0.4394018330648625, 0.4394676367238504, 0.4387809691771389, 0.4386282871020798, 0.43924232863119955, 0.4394204170456417, 0.4392444197974923, 0.43926935916585474, 0.43927679139989173, 0.43938722179091566, 0.4394921387501729, 0.4391108113665376, 0.4386026100431377, 0.4392795106890682], 6:
           [0.4244844828387814, 0.4249932345495975, 0.42468946798818685, 0.4251077410310187, 0.4247911437775258, 0.4247718607229633, 0.42445117260219606, 0.4251432607504818, 0.4244760638687512, 0.424466630527204, 0.42475220435463895, 0.42500908832948003, 0.42501842305984255, 0.4247837799995542, 0.4251090739688005, 0.42447192949219203, 0.42447669768264995, 0.4250895798447652, 0.42512699025488654, 0.4248410940327039, 0.4244558491592337, 0.4250316444585463, 0.4244679738691246, 0.42493313882755923, 0.42503454528994117, 0.42500545506113013, 0.42514724187133845, 0.4249464409124721, 0.42445328551264744, 0.42474251425510684]}
    ds1 = {2: [0.39010283851251304, 0.38748140119454455, 0.3874820069928636, 0.3904908189844941, 0.3874820704164404, 0.38747450063839567, 0.3874808883369233, 0.38787694774949744, 0.38748202946188104, 0.3874835341039878, 0.390869566961831, 0.3873768036799367, 0.38777367442425303, 0.3874844842353898, 0.38748019343831225, 0.388226329280753, 0.3874840399464044, 0.3874822937744624, 0.3874803666345053, 0.3874839582281792, 0.39083734236877316, 0.38956145344830956, 0.38748109178200835, 0.3873679359633374, 0.38965788772683113, 0.3873956607971477, 0.38748218517097865, 0.38748264926365344, 0.3879722517605182, 0.3874783948383884], 3: [0.4343672675739289, 0.434355242357195, 0.43433608695878245, 0.43387996547230917, 0.43441492484929767, 0.4343583718064323, 0.43433702963758214, 0.4343490892553623, 0.43455180671785043, 0.4344294140089012, 0.43446108860470845, 0.43440428610597814, 0.43437606322146444, 0.4343919980424681, 0.4344321063274364, 0.43440980358715797, 0.43433847679466836, 0.43442185095545405, 0.43406050280633685, 0.4344069509793125, 0.43434386435566136, 0.4343693500614305, 0.43435799606472775, 0.43464210706677014, 0.43433636918434004, 0.434353213297539, 0.4343958556074638, 0.4343882261809176, 0.4344267581746771, 0.43449225882002185], 4: [0.4057121120856217, 0.4059204820443316, 0.40573668062801277, 0.40765368155607123, 0.40660860647407193, 0.40566157753515947, 0.4056207207114296, 0.40580042626442603, 0.40572574448670917, 0.40573580049704683, 0.4057250410374221, 0.4078541185956732, 0.4058059723307504, 0.4057623396237677, 0.4057104702647888,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   0.40586699674325855, 0.405775831122841, 0.4057797152553392, 0.40569646554570704, 0.40645806690146136, 0.40576989475953656, 0.4068889068841924, 0.40612569275686017, 0.40558613596421894, 0.4064110983216087, 0.4057121048021073, 0.40635682771397363, 0.405704408232129, 0.40578537125387626, 0.40582340770672365], 5: [0.399389665599539, 0.3993797282361347, 0.39936205683538717, 0.39894054338272583, 0.3993826307515808, 0.39935477915467055, 0.39935871808876094, 0.3998462582508902, 0.39960009260557566, 0.39942299132319703, 0.3993357258453177, 0.39989626282605056, 0.399363058125671, 0.39942607606918246, 0.3992926038045055, 0.3997729766998543, 0.3995270984771498, 0.39979005661169775, 0.3993887626170726, 0.3993908982276868, 0.3992957964567696, 0.3987057223723775, 0.3994209025465184, 0.39919624094482925, 0.39947933781756895, 0.39932526388574574, 0.3994212441681793, 0.39913919439483164, 0.39946719650753504, 0.3994244818505076], 6: [0.4005740726828106, 0.40041938822942374, 0.4007425977624253, 0.400591821973494, 0.40062150010999914, 0.4005244783373065, 0.4009301231732363, 0.40148263349661606, 0.40059724510834666, 0.40091027952422637, 0.40084269625559893, 0.40078148948000847, 0.40049690403008376, 0.40084973463378204, 0.4010253722242073, 0.40098428615687054, 0.40048176918440714, 0.40080553280224995, 0.40152694461238025, 0.40101815760580967, 0.40070145884308395, 0.4006453266277787, 0.40067682181997977, 0.40129185848445575, 0.40098320721904795, 0.4014275718945689, 0.40138295212138775, 0.40040661596533966, 0.40139571824627324, 0.40090458121125516]}
    """
    big1 = [0.5316051061149129, 0.5313544552746292,
            0.5284676462813523, 0.5185293486486208, 0.5254370200983031]
    small1 = [0.47106461164385516, 0.42643220742575855,
              0.46554948147354047, 0.4580673674873738, 0.43269060792296526]

    big2 = [0.5644135296461547, 0.554851908963434,
            0.5579005672131422, 0.5524363908987726, 0.5583550027508685]
    small2 = [0.457, 0.393, 0.456, 0.44, 0.41]

    test = StatisticalTest(small1, big1)
    p1 = test.evaluate()
    print("p1:", p1)
    test = StatisticalTest(small2, big2)
    p2 = test.evaluate()
    print("p2:", p2)

    d = {
        537: [0.4457657766103969, 0.44576577661039685, 0.4457657766103969, 0.44576577661039685, 0.44576577661039696, 0.44576577661039696, 0.4457657766103969, 0.44576577661039696, 0.44576577661039685, 0.44576577661039696],
        5323: [0.44576577661039696, 0.4457657766103969, 0.44576577661039696, 0.44576577661039685, 0.44576577661039685, 0.44576577661039696, 0.44576577661039685, 0.44576577661039696, 0.4457657766103969, 0.44576577661039696],
        3: [0.44583131329481984, 0.44583131329481984, 0.4458313132948197, 0.4458313132948198, 0.4458313132948198, 0.44583131329481973, 0.44583131329481984, 0.4458313132948198, 0.44583131329481973, 0.44583131329481973],
        42: [0.4457701201857853, 0.4457701201857853, 0.44577012018578527, 0.4457701201857853, 0.44577012018578527, 0.44577012018578527, 0.4457701201857854, 0.4457701201857852, 0.4457701201857853, 0.4457701201857852],
        323: [0.44536369829740285, 0.4453636982974029, 0.44536369829740285, 0.4453636982974029, 0.44536369829740297, 0.44536369829740297, 0.44536369829740297, 0.44536369829740297, 0.44536369829740285, 0.44536369829740297]
    }
    print("kruskal")
    s, p = kruskal(d[537], d[5323])
    print(s, p)
    s, p = kruskal(d[5323], d[3])
    print(s, p)
    s, p = kruskal(d[537], d[42])
    print(s, p)
    s, p = kruskal(d[537], d[323])
    print(s, p)
    print("anova")
    s, p = f_oneway(d[537], d[5323])
    print(s, p)
    s, p = f_oneway(d[5323], d[3])
    print(s, p)
    s, p = f_oneway(d[537], d[42])
    print(s, p)
    s, p = f_oneway(d[537], d[323])
    print(s, p)
    """


if __name__ == "__main__":
    main()
